[{"content":"The Question? Should a software engineer use tabs or spaces when writing code?\nThe Answer? Use tabs, no really. In your favorite text-editor or IDE, simply set the tab length to 4 spaces.\nWhy?  Tabs take only one byte, whereas the equivalent (4 spaces) takes four bytes.  Realistically, this doesn\u0026rsquo;t matter nowadays with compression, minification, and large HDD/SSD storage mediums available.   Tabs allow you to set the visual-width to your liking.  Do you prefer 2 spaces or 8 spaces over the conventional 4 spaces? Change the default tab width and you\u0026rsquo;re off to the races.   Go and Python (my current go-to languages) enforce consistency and significantly favor tabs over spaces.  Example Program created with tabs!\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;errors\u0026#34; ) func main() { err := TabsAreSuperior(\u0026#34;tabs\u0026#34;) if err != nil { fmt.Println(err.Error()) } } func TabsAreSuperior(input string) error { switch input { case \u0026#34;tabs\u0026#34;: fmt.Println(\u0026#34;this is the way\u0026#34;) return nil case \u0026#34;spaces\u0026#34;: fmt.Println(\u0026#34;that\u0026#39;s not tabs\u0026#34;) return nil default: return errors.New(\u0026#34;please input either \u0026#39;tabs\u0026#39; or \u0026#39;spaces\u0026#39;\u0026#34;) } } ","permalink":"https://michaelpeters.dev/posts/spaces-vs-tabs/","summary":"The Question? Should a software engineer use tabs or spaces when writing code?\nThe Answer? Use tabs, no really. In your favorite text-editor or IDE, simply set the tab length to 4 spaces.\nWhy?  Tabs take only one byte, whereas the equivalent (4 spaces) takes four bytes.  Realistically, this doesn\u0026rsquo;t matter nowadays with compression, minification, and large HDD/SSD storage mediums available.   Tabs allow you to set the visual-width to your liking.","title":"Spaces vs. Tabs"}]