[{"content":"Issue This evening, I was struggling to access my new \u0026ldquo;7 Days To Die\u0026rdquo; server after provisioning a new Rocky Linux 8 VM to host it on. As a preface, I have plenty of experience hosting both bare-metal and VM game servers. For Steam games, my tool of choice is typically LinuxGSM by Daniel Gibbs. This is a fabulous piece of software that abstracts some of the nitty-gritty away (which definitely helps when running servers from multiple games).\nPort-Forwarding Normally, I would chalk a connection issue up to a misconfigured port forward. I quickly determined that another issue was at fault when I couldn\u0026rsquo;t access the server from the LAN. That is a telltale sign something else is at play.\nGoogle Searching After many dead ends, I stumbled upon this r/7daystodie thread where the OP noticed that there is a parameter in the settings file that prevents SteamNetworking from being enabled. I was dumbfounded that a default setting in the server config prevents networking/connection on the main platform of distribution.\nImportant Settings On line 15 of my configuration file (sdtdserver.xml), I removed SteamNetworking from the value field. This was based upon the suggestions from the above Reddit thread.\n\u0026lt;property name=\u0026#34;ServerDisabledNetworkProtocols\u0026#34; value=\u0026#34;SteamNetworking\u0026#34;/\u0026gt; \u0026lt;!-- Networking protocols that should not be used. Separated by comma. Possible values: LiteNetLib, SteamNetworking. Dedicated servers should disable SteamNetworking if there is no NAT router in between your users and the server or when port-forwarding is set up correctly --\u0026gt; Wrap-up I found that, when using a text-editor such as nano to edit the configuration file, the comment is obstructed which explains that SteamNetworking should be removed when \u0026ldquo;port-forwarding is set up correctly\u0026rdquo;. I would definitely say that this is user error, but from a developer side, it could definitely be more clear that this value needs to be modified before use (without relying on line-wrap). This value is easily missed and there is no emphasis or clarity that a server won\u0026rsquo;t be accessable unless you pay close attention to the configuration.\n","permalink":"https://michaelpeters.dev/posts/linuxgsm-7dtd-info/","summary":"Issue This evening, I was struggling to access my new \u0026ldquo;7 Days To Die\u0026rdquo; server after provisioning a new Rocky Linux 8 VM to host it on. As a preface, I have plenty of experience hosting both bare-metal and VM game servers. For Steam games, my tool of choice is typically LinuxGSM by Daniel Gibbs. This is a fabulous piece of software that abstracts some of the nitty-gritty away (which definitely helps when running servers from multiple games).","title":"LinuxGSM 7DaysToDie Tips"},{"content":"The Question? Should a software engineer use tabs or spaces when writing code?\nThe Answer? Use tabs, no really. In your favorite text-editor or IDE, simply set the tab length to 4 spaces.\nWhy?  Tabs take only one byte, whereas the equivalent (4 spaces) takes four bytes.  Realistically, this doesn\u0026rsquo;t matter nowadays with compression, minification, and large HDD/SSD storage mediums available.   Tabs allow you to set the visual-width to your liking.  Do you prefer 2 spaces or 8 spaces over the conventional 4 spaces? Change the default tab width and you\u0026rsquo;re off to the races.   Go and Python (my current go-to languages) enforce consistency and significantly favor tabs over spaces.  Example Program created with tabs!\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;errors\u0026#34; ) func main() { err := TabsAreSuperior(\u0026#34;tabs\u0026#34;) if err != nil { fmt.Println(err.Error()) } } func TabsAreSuperior(input string) error { switch input { case \u0026#34;tabs\u0026#34;: fmt.Println(\u0026#34;this is the way\u0026#34;) return nil case \u0026#34;spaces\u0026#34;: fmt.Println(\u0026#34;that\u0026#39;s not tabs\u0026#34;) return nil default: return errors.New(\u0026#34;please input either \u0026#39;tabs\u0026#39; or \u0026#39;spaces\u0026#39;\u0026#34;) } } ","permalink":"https://michaelpeters.dev/posts/spaces-vs-tabs/","summary":"The Question? Should a software engineer use tabs or spaces when writing code?\nThe Answer? Use tabs, no really. In your favorite text-editor or IDE, simply set the tab length to 4 spaces.\nWhy?  Tabs take only one byte, whereas the equivalent (4 spaces) takes four bytes.  Realistically, this doesn\u0026rsquo;t matter nowadays with compression, minification, and large HDD/SSD storage mediums available.   Tabs allow you to set the visual-width to your liking.","title":"Spaces vs. Tabs"}]